#!/usr/bin/env python3

"""roboauto"""

# pylint: disable=C0103 invalid-name

import sys
import re
import signal

from roboauto.logger import print_out, print_err
from roboauto.utils import \
    global_setup, global_shutdown, \
    list_configs, update_roboauto_options
from roboauto.robot import \
    robot_import, robot_print_token, robot_print_coordinator, \
    robot_print_dir_argv, waiting_queue_print, robot_change_dir_from_argv, robot_generate
from roboauto.order_local import order_info_local
from roboauto.order import \
    create_order, cancel_order, recreate_order, \
    order_buyer_update_invoice_argv, order_seller_bond_escrow_argv, \
    order_pause_toggle_argv, order_collaborative_cancel_argv, \
    order_send_confirm_argv, order_undo_confirm_argv, order_start_dispute_argv
from roboauto.chat import robot_send_chat_message_argv
from roboauto.info import robosats_info, robot_info, list_limits, robot_chat
from roboauto.book import \
    list_offers_per_hour_argv, list_offers_argv
from roboauto.keep_online import keep_online


version = "0.1"

info = """\
roboauto action [options]

list-configs
import-robot --{coordinator-name} [--pending, --inactive, --paused] [robot-name] [token]
print-token [robot-name]
print-coordinator [robot-name]
list-active|list-pending|list-inactive|list-paused [--coordinator]
list-waiting-queue
set-active [robot-name]
set-pending|set-inactive|set-paused [robot-name/--all]
order-info-local [--full] robot-name [order-id]
order-info-local [--full] --active/--pending/--paused/--inactive
order-info-local [--full] --dir directory
robosats-info --{coordinator-name}
generate-robot --{coordinator-name} [--active, --pending, --inactive]
robot-info [--no-order] [robot-name]
robot-info [--no-order] --stdin|--stdin-base91 --{coordinator-name}|coordinator-url
chat-print [--local] [robot-name]
message-send [robot-name]
list-limits --{coordinator-name}
list-hours [--relative]
list-offers --{coordinators}/--all [--sell|--buy] [currency] [search]
create-order [--no-bond] [robot-name] [key=value]
cancel-order [robot-name]
recreate-order [--no-cancel, --no-bond] robot-name key=value
pause-toggle [robot-name]
escrow-pay [robot-name]
invoice-send [robot-name]
collaborative-cancel [robot-name]
confirm-send [robot-name]
confirm-undo [robot-name]
dispute-start [robot-name]
keep-online
"""

info_verbose = """\
roboauto action [options]

-h|--help
    print this help message
--verbose-help
    print long help message
-v|--version
    print roboauto version

list-configs
    list configs

import-robot --{coordinator-name} [--pending, --inactive, --paused] [robot-name] [token]
    import a robot, robot-name and token are required
    if not passed as arguments roboauto will ask for them
    by default the new robot is put in the active folder
    so it will be considered when running keep-online
    --inactive imports the robot in the inactive directory
    --paused imports the robot in the paused directory

print-token [robot-name]
    print robot token

print-coordinator [robot-name]
    print robot coordinator and url

list-active|list-pending|list-inactive|list-paused [--coordinator]
    list active|pending|inactive|paused robots one per line
    if --coordinator is specified also print the coordinator name or every robot

list-waiting-queue
    list waiting queue

set-active [robot-name]
    set a pending|inactive|paused robot active

set-pending|set-inactive|set-paused [robot-name/--all]
    set an active robot active|pending|inactive|paused
    if --all, set all robot

order-info-local [--full] robot-name [order-id]
order-info-local [--full] --active/--pending/--paused/--inactive
order-info-local [--full] --dir directory
    print info about an order from disk
    if --full is provided print all data about the order
    if --active, --pending, --paused, --inactive or a directory is passed print
    local order info about all robots in the directory

robosats-info --{coordinator-name}
    get info about robosats

generate-robot --{coordinator-name} [--active, --pending, --inactive]
    generate a robot on coordinator by default in paused dir

robot-info [--no-order] [robot-name]
robot-info [--no-order] --stdin|--stdin-base91 --{coordinator-name}|coordinator-url
    get info about a robot
    and if --no-order is present its order if present
    if instead of robot-name --stdin or --stdin-base91 is passed
    token is taken from stdin and coordinator is also required

chat-print [--local] [robot-name]
    print messages of robot-name
    if --local print from local, after having previously run without --local

message-send [robot-name] [message]
    send message from robot-name
    if message starts with # do not encrypt it

list-limits --{coordinator-name}
    list currency limits

list-hours [--relative]
    list orders per hours of the day
    if --relative is passed list orders per hours relative from current time

list-offers --{coordinators}/--all [--sell|--buy] [currency] [search]
    list all [buy|sell] offers in the order book
    multiple coordinators can be specified or --all
    search is the string to be searched in the payment method

create-order [--no-bond] [robot-name] [key=value]
    create a new order
    if --no-bond create order but do not bond
    if key=value are not provided they will be asked

cancel-order [robot-name]
    cancel robot order just if order is public or paused

recreate-order [--no-cancel, --no-bond] robot-name key=value
    recreate robot order just if order is public or paused
    if --no-cancel do not cancel the order, recreate is from
    last saved order
    if --no-bond create order but do not bond
    provide a list of key=value of parameters to change in the
    new order

pause-toggle [robot-name]
    toggle pause order in robosats

escrow-pay [robot-name]
    pay the escrow of a sell order

invoice-send [robot-name]
    generate and send invoice of a buy order

collaborative-cancel [robot-name]
    ask for a collaborative cancel or if the peer already asked for
    it accept a collaborative cancel
    can only be sent when waiting only for buyer invoice or
    sending fiat in the chat

confirm-send [robot-name]
    send confirmation of payment send if buyer or
    confirm payment arrived if seller

confirm-undo [robot-name]
    undo confirmation of payment sent if buyer

dispute-start [robot-name]
    start a dispute

keep-online
    keep the offers of the robots in the active directory online
    if message-notification program is present, send a message when
    something other than expirations happens to an offer
"""

signal.signal(signal.SIGPIPE, signal.SIG_DFL)

argv = sys.argv[1:]
if len(argv) < 1:
    print_err("insert parameters")
    sys.exit(1)

while len(argv) > 0:
    option = argv[0]
    if option in ("-h", "--help"):
        print_out(info, end="")
        sys.exit(0)
    elif option == "--verbose-help":
        print_out(info_verbose, end="")
        sys.exit(0)
    elif option in ("-v", "--version"):
        print_out(version)
        sys.exit(0)
    elif re.match('^-', option) is not None:
        print_err("option " + option + " not recognized")
        sys.exit(1)
    else:
        break
    argv = argv[1:]

if len(argv) < 1:
    print_err("insert action")
    sys.exit(1)
action = argv[0]
argv = argv[1:]

if global_setup() is False:
    sys.exit(1)

try:
    if update_roboauto_options() is False:
        print_err("reading the config file")
        sys.exit(1)

    if action == "list-configs":
        return_status = list_configs()
    elif action == "import-robot":
        return_status = robot_import(argv)
    elif action == "print-token":
        return_status = robot_print_token(argv)
    elif action == "print-coordinator":
        return_status = robot_print_coordinator(argv)
    elif action == "list-active":
        return_status = robot_print_dir_argv("active", argv)
    elif action == "list-pending":
        return_status = robot_print_dir_argv("pending", argv)
    elif action == "list-inactive":
        return_status = robot_print_dir_argv("inactive", argv)
    elif action == "list-paused":
        return_status = robot_print_dir_argv("paused", argv)
    elif action == "list-waiting-queue":
        return_status = waiting_queue_print()
    elif action == "set-active":
        return_status = robot_change_dir_from_argv("active", argv)
    elif action == "set-pending":
        return_status = robot_change_dir_from_argv("pending", argv)
    elif action == "set-inactive":
        return_status = robot_change_dir_from_argv("inactive", argv)
    elif action == "set-paused":
        return_status = robot_change_dir_from_argv("paused", argv)
    elif action == "order-info-local":
        return_status = order_info_local(argv)
    elif action == "robosats-info":
        return_status = robosats_info(argv)
    elif action == "generate-robot":
        return_status = robot_generate(argv)
    elif action == "robot-info":
        return_status = robot_info(argv)
    elif action == "chat-print":
        return_status = robot_chat(argv)
    elif action == "message-send":
        return_status = robot_send_chat_message_argv(argv)
    elif action == "list-limits":
        return_status = list_limits(argv)
    elif action == "list-hours":
        return_status = list_offers_per_hour_argv(argv)
    elif action == "list-offers":
        return_status = list_offers_argv(argv)
    elif action == "create-order":
        return_status = create_order(argv)
    elif action == "cancel-order":
        return_status = cancel_order(argv)
    elif action == "recreate-order":
        return_status = recreate_order(argv)
    elif action == "pause-toggle":
        return_status = order_pause_toggle_argv(argv)
    elif action == "escrow-pay":
        return_status = order_seller_bond_escrow_argv(argv)
    elif action == "invoice-send":
        return_status = order_buyer_update_invoice_argv(argv)
    elif action == "collaborative-cancel":
        return_status = order_collaborative_cancel_argv(argv)
    elif action == "confirm-send":
        return_status = order_send_confirm_argv(argv)
    elif action == "confirm-undo":
        return_status = order_undo_confirm_argv(argv)
    elif action == "dispute-start":
        return_status = order_start_dispute_argv(argv)
    elif action == "keep-online":
        return_status = keep_online()
    else:
        print_err("action " + action + " not recognized")
        sys.exit(1)
except KeyboardInterrupt:
    print_out("\n", end="", date=False)
    return_status = False
finally:
    global_shutdown()

if return_status:
    sys.exit(0)
else:
    sys.exit(1)
