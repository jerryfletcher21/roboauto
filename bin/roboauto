#!/usr/bin/env python3

# pylint: disable=C0209 consider-using-f-string
# pylint: disable=C0114 missing-module-docstring
# pylint: disable=C0103 invalid-name

import sys
import re
import signal

from roboauto.logger import print_out, print_err
from roboauto.global_state import roboauto_state
from roboauto.utils import global_setup, list_configs, update_roboauto_options
from roboauto.robot import \
    robot_import, robot_remove, robot_print_token, robot_print_coordinator, \
    robot_print_dir, waiting_queue_print, robot_change_dir_from_argv, robot_generate
from roboauto.order_local import order_info_local
from roboauto.order import create_order, cancel_order, recreate_order
from roboauto.info import robosats_info, robot_info, list_limits
from roboauto.book import \
    list_offers_per_hour, list_offers_all, list_offers_buy, list_offers_sell
from roboauto.keep_online import \
    slowly_move_to_active, keep_online, keep_online_refresh


version = "0.1"

info = """\
roboauto action [options]

list-configs
import-robot --{coordinator} [--pending, --inactive, --paused] [robot-name] [token]
remove-robot [robot-name]
print-token [robot-name]
print-coordinator [robot-name]
list-active|list-pending|list-inactive|list-paused
waiting-queue
set-active [robot-name]
set-pending|set-inactive|set-paused [robot-name/--all]
order-info-local [--full] robot-name [order-id]
order-info-local [--full] --active/--pending/--paused/--inactive
order-info-local [--full] --dir directory
slowly-move-to-active [seconds]
robosats-info --{coordinator}
generate-robot --{coordinator} [--active, --pending, --inactive]
robot-info [--no-order] [robot-name]
robot-info [--no-order] --stdin|--stdin-base91 --{coordinator}|coordinator-url
list-limits --{coordinator}
list-hours-absolute
list-hours-relative
list-offers-all|list-offers-buy|list-offers-sell --{coordinators}/--all [currency] [search]
create-order [--no-bond] [robot-name] [key=value]
cancel-order [robot-name]
recreate-order [--no-cancel, --no-bond] robot-name key=value
keep-online
keep-online-refresh
"""

info_verbose = """\
roboauto action [options]

-h|--help
    print this help message
--verbose-help
    print long help message
-v|--version
    print roboauto version

list-configs
    list configs

import-robot --{coordinator} [--pending, --inactive, --paused] [robot-name] [token]
    import a robot, robot-name and token are required
    if not passed as arguments roboauto will ask for them
    by default the new robot is put in the active folder
    so it will be considered when running keep-online
    --inactive imports the robot in the inactive directory
    --paused imports the robot in the paused directory

remove-robot [robot-name]
    remove a robot searching all directories

print-token [robot-name]
    print robot token

print-coordinator [robot-name]
    print robot coordinator and url

list-active|list-pending|list-inactive|list-paused
    list active|pending|inactive|paused robots one per line

waiting-queue
    list waiting queue

set-active [robot-name]
    set a pending|inactive|paused robot active

set-pending|set-inactive|set-paused [robot-name/--all]
    set an active robot active|pending|inactive|paused
    if --all, set all robot

order-info-local [--full] robot-name [order-id]
order-info-local [--full] --active/--pending/--paused/--inactive
order-info-local [--full] --dir directory
    print info about an order from disk
    if --full is provided print all data about the order
    if --active, --pending, --paused, --inactive or a directory is passed print
    local order info about all robots in the directory

slowly-move-to-active [seconds]
    slowly move robots to active from paused
    if seconds is not present $slowly_paused_interval is used

robosats-info --{coordinator}
    get info about robosats

generate-robot --{coordinator} [--active, --pending, --inactive]
    generate a robot on coordinator by default in paused dir

robot-info [--no-order] [robot-name]
robot-info [--no-order] --stdin|--stdin-base91 --{coordinator}|coordinator-url
    get info about a robot
    and if --no-order is present its order if present
    if instead of robot-name --stdin or --stdin-base91 is passed
    token is taken from stdin and coordinator is also required

list-limits --{coordinator}
    list currency limits

list-hours-absolute
    list orders per hours absolute

list-hours-relative
    list orders per hours relative from current time

list-offers-all|list-offers-buy|list-offers-sell --{coordinators}/--all [currency] [search]
    list all [buy|sell] offers in the order book
    multiple coordinators can be specified or --all

create-order [--no-bond] [robot-name] [key=value]
    create a new order
    if --no-bond create order but do not bond
    if key=value are not provided they will be asked

cancel-order [robot-name]
    cancel robot order just if order is public or paused

recreate-order [--no-cancel, --no-bond] robot-name key=value
    recreate robot order just if order is public or paused
    if --no-cancel do not cancel the order, recreate is from
    last saved order
    if --no-bond create order but do not bond
    provide a list of key=value of parameters to change in the
    new order

keep-online
    keep the offers of the robots in the active directory online
    if message-send program is present, send a message when
    something other than expirations happens to an offer

keep-online-refresh
    if there is an other instance of robosats keep-online running
    skip sleeping one time
"""

signal.signal(signal.SIGPIPE, signal.SIG_DFL)

if global_setup() is False:
    sys.exit(1)

if update_roboauto_options() is False:
    print_err("reading the config file")
    sys.exit(1)

argv = sys.argv[1:]
if len(argv) < 1:
    print_err("insert parameters")
    sys.exit(1)

while len(argv) > 0:
    option = argv[0]
    if option in ("-h", "--help"):
        print_out(info, end="")
        sys.exit(0)
    elif option == "--verbose-help":
        print_out(info_verbose, end="")
        sys.exit(0)
    elif option in ("-v", "--version"):
        print_out(version)
        sys.exit(0)
    elif re.match('^-', option) is not None:
        print_err("option " + option + " not recognized")
        sys.exit(1)
    else:
        break
    argv = argv[1:]

if len(argv) < 1:
    print_err("insert action")
    sys.exit(1)
action = argv[0]
argv = argv[1:]

try:
    if action == "list-configs":
        return_status = list_configs()
    elif action == "import-robot":
        return_status = robot_import(argv)
    elif action == "remove-robot":
        return_status = robot_remove(argv)
    elif action == "print-token":
        return_status = robot_print_token(argv)
    elif action == "print-coordinator":
        return_status = robot_print_coordinator(argv)
    elif action == "list-active":
        return_status = robot_print_dir(roboauto_state["active_home"])
    elif action == "list-pending":
        return_status = robot_print_dir(roboauto_state["pending_home"])
    elif action == "list-inactive":
        return_status = robot_print_dir(roboauto_state["inactive_home"])
    elif action == "list-paused":
        return_status = robot_print_dir(roboauto_state["paused_home"])
    elif action == "waiting-queue":
        return_status = waiting_queue_print()
    elif action == "set-active":
        return_status = robot_change_dir_from_argv("active", argv)
    elif action == "set-pending":
        return_status = robot_change_dir_from_argv("pending", argv)
    elif action == "set-inactive":
        return_status = robot_change_dir_from_argv("inactive", argv)
    elif action == "set-paused":
        return_status = robot_change_dir_from_argv("paused", argv)
    elif action == "order-info-local":
        return_status = order_info_local(argv)
    elif action == "slowly-move-to-active":
        return_status = slowly_move_to_active(argv)
    elif action == "robosats-info":
        return_status = robosats_info(argv)
    elif action == "generate-robot":
        return_status = robot_generate(argv)
    elif action == "robot-info":
        return_status = robot_info(argv)
    elif action == "list-limits":
        return_status = list_limits(argv)
    elif action == "list-hours-absolute":
        return_status = list_offers_per_hour(False)
    elif action == "list-hours-relative":
        return_status = list_offers_per_hour(True)
    elif action == "list-offers-all":
        return_status = list_offers_all(argv)
    elif action == "list-offers-buy":
        return_status = list_offers_buy(argv)
    elif action == "list-offers-sell":
        return_status = list_offers_sell(argv)
    elif action == "create-order":
        return_status = create_order(argv)
    elif action == "cancel-order":
        return_status = cancel_order(argv)
    elif action == "recreate-order":
        return_status = recreate_order(argv)
    elif action == "keep-online":
        return_status = keep_online()
    elif action == "keep-online-refresh":
        return_status = keep_online_refresh()
    else:
        print_err("action " + action + " not recognized")
        sys.exit(1)
except KeyboardInterrupt:
    print_out("\n", end="", date=False)
    return_status = False

if return_status:
    sys.exit(0)
else:
    sys.exit(1)
