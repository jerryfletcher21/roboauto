#!/bin/sh

is_uint() {
    case "$1" in
        ''|*[!0-9]*)
            return 1
        ;;
        *)
            return 0
        ;;
    esac
}

lightning_cli() {
    # change if core lightning binary is different
    lightning-cli "$@"
}

# check that the invoice is for the correct amount
# decoding the invoice with core lightning
lightning_check() {
    if [ "$#" -lt 2 ]; then
        echo "error: there are not enough parameters" >&2
        return 1
    fi
    invoice="$1"
    amount="$2"
    shift 2

    if ! invoice_amount_msat="$(
        lightning_cli decode "$invoice" |
        jq -e -r '.amount_msat'
    )"; then
        echo "error: amount mast not present in invoice" >&2
        return 1
    fi
    if ! is_uint "$invoice_amount_msat"; then
        echo "error: getting invoice amount msat" >&2
        return 1
    fi

    invoice_amount="$(echo "scale=0; $invoice_amount_msat / 1000" | bc)"
    if ! is_uint "$invoice_amount"; then
        echo "error: getting invoice amount" >&2
        return 1
    fi

    if [ "$invoice_amount" -ne "$amount" ]; then
        echo "amount: $amount invoice amount: $invoice_amount" >&2
        if [ "$invoice_amount" -gt "$amount" ]; then
            echo "error: invoice amount is too big" >&2
        elif [ "$invoice_amount" -lt "$amount" ]; then
            echo "error: invoice amount is too small" >&2
        fi
        return 1
    fi

    # optionally also check if the amount is greater than a maximum amount

    # maximum_amount="10000000"
    # if [ "$invoice_amount" -gt "$maximum_amount" ]; then
    #     echo "invoice amount: $invoice_amount maximum amount: $maximum_amount" >&2
    #     echo "error: invoice amount is greater than maximum amount" >&2
    #     return 1
    # fi

    return 0
}

# pay the invoice with core lightning
lightning_pay() {
    if [ "$#" -lt 2 ]; then
        echo "error: there are not enough parameters" >&2
        return 1
    fi
    invoice="$1"
    pay_label="$2"
    shift 2

    lightning_cli -k pay \
        bolt11="$invoice" \
        label="$pay_label" \
        &
}

# generate an invoice with core lightning
lightning_invoice() {
    if [ "$#" -lt 2 ]; then
        echo "error: there are not enough parameters" >&2
        return 1
    fi
    amount="$1"
    invoice_label="$2"
    shift 2

    # delete old invoice is present
    # used when after creating an invoice, the invoice is rejected by robosats
    # for any reason, so a new one will have to be created using the same label
    if ! list_invoices="$(
        lightning_cli -k listinvoices label="$invoice_label"
    )"; then
        echo "error: running listinvoices" >&2
        return 1
    fi
    if ! number_invoices="$(
        printf "%s\n" "$list_invoices" |
        jq -e -r '.invoices | length'
    )"; then
        echo "error: getting number of old invoices with the same label" >&2
        return 1
    fi
    if [ "$number_invoices" -ge 1 ]; then
        if [ "$number_invoices" -gt 1 ]; then
            echo "error: there are more than one invoice with the same label" >&2
            return 1
        fi
        if ! invoice_status="$(
            printf "%s\n" "$list_invoices" |
            jq -e -r '.invoices[].status'
        )"; then
            echo "error: status of old invoice with the same label not present" >&2
            return 1
        fi
        if [ "$invoice_status" != "unpaid" ]; then
            echo "error: status of old invoice is $invoice_status instead of unpaid" >&2
            return 1
        fi
        if ! lightning_cli -k delinvoice label="$invoice_label" status=unpaid >/dev/null; then
            echo "error: deleting old invoice" >&2
            return 1
        fi
    fi

    if ! invoice_output="$(
        lightning_cli -k invoice \
            amount_msat="${amount}sat" \
            label="$invoice_label" \
            description= \
            exposeprivatechannels=false
    )"; then
        echo "error: generating invoice $invoice_label" >&2
        return 1
    fi
    if ! invoice="$(
        printf "%s\n" "$invoice_output" |
        jq -e -r '.bolt11'
    )"; then
        echo "error: invoice not present" >&2
        return 1
    fi

    printf "%s\n" "$invoice"

    return 0
}

if [ "$#" -lt 1 ]; then
    echo "error: insert action" >&2
    return 1
fi
action="$1"
shift 1

case "$action" in
    check)
        lightning_check "$@"
    ;;
    pay)
        lightning_pay "$@"
    ;;
    invoice)
        lightning_invoice "$@"
    ;;
    *)
        echo "error: action $action not available" >&2
        exit 1
    ;;
esac
