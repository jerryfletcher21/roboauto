#!/usr/bin/env bash

# source this file in ~/.bashrc
# if the bash completion package is installed there are better
# completions in roboauto create-order and recreate-order

__roboauto_completion() {
    local ifs_original="$IFS"
    local ifs_newline='
'

    ___list_non_already_set_array() {
        local list_full="$1"
        local item_current="$2"
        shift 2
        local array_compare=("$@")

        local item_full item_compare should_add

        IFS="$ifs_newline"
        for item_full in $list_full; do
            IFS="$ifs_original"

            should_add=true

            for item_compare in "${array_compare[@]}"; do
                case "$item_compare" in
                    "$item_current") ;;
                    *=*)
                        if [ "${item_compare%%=*}" = "$item_full" ]; then
                            should_add=false
                            break
                        fi
                    ;;
                esac
            done

            if [ "$should_add" = true ]; then
                printf "%s\n" "$item_full"
            fi

            IFS="$ifs_newline"
        done
        IFS="$ifs_original"
    }

    ___roboauto_complete_order_fields() {
        case "$cur" in
        *=*)
            case "$cur" in
            type=*)
                cur="${cur#*=}"
                OPTS="
buy
sell"
            ;;
            currency=*)
                cur="${cur#*=}"
                OPTS="$(roboauto list-currencies)"
            ;;
            payment_method=*)
                cur="${cur#*=}"
                local word methods payment_methods
                methods="all"
                for word in "${words[@]}"; do
                    case "$word" in
                    currency=*)
                        currency="${word#*=}"
                        if [ "$currency" = "btc" ]; then
                            methods="swap"
                        else
                            methods="fiat"
                        fi
                        break
                    ;;
                    esac
                done
                if [ "$methods" = "all" ]; then
                    payment_methods="$(roboauto list-payment-methods)"
                else
                    payment_methods="$(roboauto list-payment-methods --"${methods}")"
                fi
                OPTS="$(
                    printf "%s\n" "$payment_methods" |
                    awk 'NF { print "\""$0"\"" }'
                )"
            ;;
            esac
        ;;
        *)
            local order_keys order_keys_correct

            order_keys="$(roboauto list-order-fields)"
            order_keys_correct="payment_method
$(
    ___list_non_already_set_array \
        "$order_keys" "$cur" "${words[@]}"
)"

            OPTS="$(
                printf "%s\n" "$order_keys_correct" |
                uniq |
                sed 's/$/=/'
            )"
        ;;
        esac
    }

    ___roboauto_get_coordinators() {
        roboauto list-configs | jq -r '.federation | keys[] as $k | "--\($k)"'
    }

    ___roboauto_get_robots() {
        find "$@" -mindepth 1 -maxdepth 1 -type d |
        rev |
        cut -d "/" -f 1 |
        rev
    }

    # shellcheck disable=SC2034
    local cur prev words=() cword
    local word advanced_completion minimal_completion

    # if bash completion is sourced
    if [ "$(type -t _get_comp_words_by_ref 2>/dev/null)" = "function" ]; then
        _get_comp_words_by_ref -n = cur prev words cword

        advanced_completion=true
    else
        cur="$2"
        prev="$3"
        words=("${COMP_WORDS[@]}")
        cword="$COMP_CWORD"

        advanced_completion=false
    fi

    minimal_completion=false

    OPTS=""

    if [ "${cword}" -eq 1 ]; then
        OPTS="
-h
--help
--verbose-help
-v
--version
$(
    roboauto -h |
    grep '^[^[:space:]]' |
    tail -n +2 |
    cut -d " " -f 1 |
    tr '|' '\n' |
    uniq
)"
    else
        local action="${words[1]}"

        local roboauto_home="${XDG_DATA_HOME:-${XDG_LOCAL_HOME:-$HOME/.local}/share}/roboauto"
        local active_home="$roboauto_home/active"
        local pending_home="$roboauto_home/pending"
        local inactive_home="$roboauto_home/inactive"
        local paused_home="$roboauto_home/paused"

        if
            [ ! -d "$active_home" ] ||
            [ ! -d "$pending_home" ] ||
            [ ! -d "$inactive_home" ] ||
            [ ! -d "$paused_home" ]
        then
            return 0
        fi

        case "$action" in
        list-payment-methods)
            if [ "${cword}" -eq 2 ]; then
                OPTS="
--fiat
--swap
"
            fi
        ;;
        import-robot)
            if [ "${cword}" -eq 2 ]; then
                OPTS="$(___roboauto_get_coordinators)"
            elif [ "${cword}" -eq 3 ]; then
                OPTS="
--inactive
--paused
"
            fi
        ;;
        print-token|print-coordinator)
            if [ "${cword}" -eq 2 ]; then
                OPTS="$(
                    ___roboauto_get_robots \
                        "$active_home" "$pending_home" "$inactive_home" "$paused_home"
                )"
            fi
        ;;
        list-active|list-pending|list-inactive|list-paused)
            if [ "${cword}" -eq 2 ]; then
                OPTS="--coordinator"
            fi
        ;;
        set-active)
            if [ "${cword}" -eq 2 ]; then
                OPTS="$(
                    ___roboauto_get_robots \
                        "$pending_home" "$inactive_home" "$paused_home"
                )"
            fi
        ;;
        set-pending|set-inactive|set-paused)
            if [ "${cword}" -eq 2 ]; then
                OPTS="
--all
$(___roboauto_get_robots "$active_home")"
            fi
        ;;
        order-info-dir)
            if [ "${cword}" -eq 2 ]; then
                OPTS="$OPTS
--active
--inactive
--paused
--dir"
            fi
            if [ "${cword}" -eq 3 ] && [ "$prev" == "--dir" ]; then
                minimal_completion=true
            fi
        ;;
        robosats-info|list-limits)
            if [ "${cword}" -eq 2 ]; then
                OPTS="$(___roboauto_get_coordinators)"
            fi
        ;;
        robot-info)
            if [ "${cword}" -eq 2 ]; then
                OPTS="$OPTS
--stdin
--stdin-base91
$(___roboauto_get_robots "$active_home" "$pending_home")"
            fi
            if [ "${cword}" -eq 3 ]; then
                if [ "$prev" = "--stdin" ] || [ "$prev" = "--stdin-base91" ]; then
                    OPTS="$(___roboauto_get_coordinators)"
                fi
            fi
        ;;
        order-info)
            if [ "${cword}" -eq 2 ]; then
                OPTS="
--local
--simple"
            fi
            if [ "${cword}" -eq 3 ]; then
                if [ "$prev" == "--local" ]; then
                    OPTS="--simple"
                elif [ "$prev" == "--simple" ]; then
                    OPTS="--local"
                fi
            fi
            local is_local=false
            for word in "${words[@]}"; do
                case "$word" in
                --local)
                    is_local=true
                    break
                ;;
                esac
            done
            if \
                [ "${cword}" -eq 2 ] || {
                    { [ "${cword}" -eq 3 ] || [ "${cword}" -eq 4 ]; } && \
                    { [ "$prev" = "--local" ] || [ "$prev" = "--simple" ]; }
                }
            then
                local robots
                if [ "$is_local" = false ]; then
                    robots="$(
                        ___roboauto_get_robots \
                            "$active_home" "$paused_home" "$pending_home"
                    )"
                else
                    robots="$(
                        ___roboauto_get_robots \
                            "$active_home" "$paused_home" "$pending_home" "$inactive_home"
                    )"
                fi
                OPTS="$OPTS
$robots"
            elif [ "$is_local" = true ]; then
                local robot_dir orders
                robot_dir="$(
                    find "$roboauto_home" -type d -name "$prev" 2>/dev/null
                )"
                if [ -d "$robot_dir" ]; then
                    orders="$(
                        find "${robot_dir}/orders" -mindepth 1 -maxdepth 1 2>/dev/null |
                        rev |
                        cut -d "/" -f 1 |
                        rev
                    )"
                    if [ -n "$orders" ]; then
                        OPTS="$orders"
                    fi
                fi
            fi
        ;;
        chat-print)
            if [ "${cword}" -eq 2 ]; then
                OPTS="--local"
            fi
            if [ "${cword}" -eq 2 ] || [ "${cword}" -eq 3 ]; then
                OPTS="$OPTS
$(___roboauto_get_robots "$pending_home")"
            fi
        ;;
        message-send)
            if [ "${cword}" -eq 2 ]; then
                OPTS="$(___roboauto_get_robots "$pending_home")"
            fi
        ;;
        list-hours)
            if [ "${cword}" -eq 2 ]; then
                OPTS="--relative"
            fi
        ;;
        list-offers)
            local possible_coordinatos all_currencies
            possible_coordinatos="
--all
$(___roboauto_get_coordinators)"
            all_currencies="
all
$(roboauto list-currencies)
"
            if [ "${cword}" -eq 2 ]; then
                OPTS="$possible_coordinatos"
            elif [ "${cword}" -eq 3 ]; then
                OPTS="
--buy
--sell
$all_currencies"
            elif \
                [ "${cword}" -eq 4 ] && {
                    [ "$prev" = "--sell" ] || [ "$prev" = "--buy" ]
                }
            then
                OPTS="$all_currencies"
            fi
        ;;
        create-order)
            if [ "${cword}" -eq 2 ]; then
                OPTS="
--no-bond
--no-active"
            fi
            if [ "${cword}" -eq 3 ]; then
                if [ "$prev" == "--no-bond" ]; then
                    OPTS="--no-active"
                elif [ "$prev" == "--no-active" ]; then
                    OPTS="--no-bond"
                fi
            fi
            if \
                [ "${cword}" -eq 2 ] || {
                    { [ "${cword}" -eq 3 ] || [ "${cword}" -eq 4 ]; } && \
                    { [ "$prev" = "--no-bond" ] || [ "$prev" = "--no-active" ]; }
                }
            then
                OPTS="$OPTS
$(___roboauto_get_robots "$paused_home")"
            elif [ "$advanced_completion" = true ]; then
                ___roboauto_complete_order_fields
            fi
        ;;
        cancel-order)
            if [ "${cword}" -eq 2 ]; then
                OPTS="$(___roboauto_get_robots "$active_home")"
            fi
        ;;
        recreate-order)
            if [ "${cword}" -eq 2 ]; then
                OPTS="
--no-cancel
--no-bond
$(___roboauto_get_robots "$active_home")"
            elif \
                [ "${cword}" -eq 3 ] && {
                    [ "$prev" = "--no-cancel" ] || [ "$prev" = "--no-bond" ]
                }
            then
                case "$prev" in
                --no-cancel)
                    OPTS="$(___roboauto_get_robots "$paused_home" "$inactive_home")"
                ;;
                --no-bond)
                    OPTS="$(___roboauto_get_robots "$active_home")"
                ;;
                esac
            elif [ "$advanced_completion" = true ]; then
                ___roboauto_complete_order_fields
            fi
        ;;
        take-order)
            if [ "${cword}" -eq 2 ]; then
                OPTS="$(___roboauto_get_robots "$paused_home")"
            fi
        ;;
        pause-toggle)
            if [ "${cword}" -eq 2 ]; then
                OPTS="$(___roboauto_get_robots "$active_home" "$paused_home")"
            fi
        ;;
        escrow-pay|invoice-send|collaborative-cancel|confirm-send|confirm-undo|dispute-start)
            if [ "${cword}" -eq 2 ]; then
                OPTS="$(___roboauto_get_robots "$pending_home")"
            fi
        ;;
        rate-coordinator)
            if [ "${cword}" -eq 2 ]; then
                OPTS="$(___roboauto_get_robots "$inactive_home")"
            elif [ "${cword}" -eq 3 ]; then
                OPTS="$(seq 1 5)"
            fi
        ;;
        keep-online)
            if [ "${cword}" -eq 2 ]; then
                OPTS="--quiet"
            fi
        ;;
        esac
    fi

    if [ -n "$OPTS" ]; then
        # complete with ignorecase and multi words
        IFS="$ifs_newline"
        # shellcheck disable=SC2207
        COMPREPLY=($(
            printf "%s\n" "$OPTS" |
            awk -v IGNORECASE=1 -v p="$cur" 'p==substr($0,0,length(p))'
        ))
        IFS="$ifs_original"

        # do not put a space when the completion ends with an equal
        for word in "${COMPREPLY[@]}"; do
            case "$word" in
            *=)
                compopt -o nospace
            ;;
            esac
        done
    elif [ "$minimal_completion" = true ]; then
        if [ "$(type -t _minimal 2>/dev/null)" = "function" ]; then
            _minimal
        fi
    fi
} &&
complete -F __roboauto_completion roboauto
