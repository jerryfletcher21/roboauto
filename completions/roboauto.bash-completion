#!/usr/bin/env bash

# source this file in ~/.bashrc
# if the bash completion package is installed there are better completions
# in roboauto create-order, recreate-order and change-order-expire

__roboauto_completion() {
    if ! command -v roboauto >/dev/null 2>&1; then
        return 0
    fi

    local ifs_original="$IFS"
    local ifs_newline='
'

    ___multiple_options_handle() {
        # if it is the correct spot to include the options
        # (they are not already inserted, or the last word is one of
        # options) will print the possible options and return 0
        # if instead it is not the correct position, so there are other
        # arguments after the options, it will print the number of other
        # arguments after the last option and return 1

        # options is multiline
        # in every line there are multiple options separated by spaces
        # for the same option for example -h --help

        local starting_position="$1"
        shift 1
        local options="$1"
        shift 1
        local words=("$@")

        local multi_option found option i word

        local opts=""

        local number_arguments=0

        if [ "${#words[@]}" -lt "$starting_position" ]; then
            printf "%s\n" "$number_arguments"
            return 1
        fi

        case "${words[${#words[@]}-1]}" in
        *=)
            printf "%s\n" "$number_arguments"
            return 1
        ;;
        esac

        for ((i = "${#words[@]}" - 2; i >= "$starting_position"; i--)); do
            word="${words[i]}"

            found=false

            IFS="$ifs_newline"
            for multi_option in $options; do
                IFS="$ifs_original"

                for option in $multi_option; do
                    if [ "${word%%=*}" = "${option%=}" ]; then
                        found=true
                        break
                    fi
                done
                if [ "$found" = true ]; then
                    break
                fi

                IFS="$ifs_newline"
            done
            IFS="$ifs_original"

            if [ "$found" = false ]; then
                number_arguments="$(( number_arguments + 1 ))"
            else
                break
            fi
        done

        # number_arguments == 0 when last word is an option
        # number_arguments == #words - starting_position when there
        # is a word in starting_position and is not an option
        if
            [ "$number_arguments" -gt 0 ] &&
            [ "$(( number_arguments + starting_position ))" -lt "${#words[@]}" ]
        then
            printf "%s\n" "$number_arguments"
            return 1
        fi

        IFS="$ifs_newline"
        for multi_option in $options; do
            IFS="$ifs_original"

            found=false
            for option in $multi_option; do
                for ((i = "$starting_position"; i < "${#words[@]}" - 1; i++)); do
                    word="${words[i]}"
                    if [ "${word%%=*}" = "${option%=}" ]; then
                        found=true
                        break
                    fi
                done
                if [ "$found" = true ]; then
                    break
                fi
            done
            if [ "$found" = false ]; then
                for option in $multi_option; do
                    opts="$opts
$option"
                done
            fi

            IFS="$ifs_newline"
        done
        IFS="$ifs_original"

        printf "%s\n" "$opts"
        return 0
    }

    ___list_non_already_set_array() {
        local list_full="$1"
        local item_current="$2"
        shift 2
        local array_compare=("$@")

        local item_full item_compare should_add

        IFS="$ifs_newline"
        for item_full in $list_full; do
            IFS="$ifs_original"

            should_add=true

            for item_compare in "${array_compare[@]}"; do
                case "$item_compare" in
                    "$item_current") ;;
                    *=*)
                        if [ "${item_compare%%=*}" = "$item_full" ]; then
                            should_add=false
                            break
                        fi
                    ;;
                    *)
                        if [ "$item_compare" = "$item_full" ]; then
                            should_add=false
                            break
                        fi
                    ;;
                esac
            done

            if [ "$should_add" = true ]; then
                printf "%s\n" "$item_full"
            fi

            IFS="$ifs_newline"
        done
        IFS="$ifs_original"
    }

    ___roboauto_complete_order_fields() {
        case "$cur" in
        *=*)
            case "$cur" in
            type=*)
                cur="${cur#*=}"
                OPTS="$OPTS
buy
sell"
            ;;
            currency=*)
                cur="${cur#*=}"
                OPTS="$OPTS
$(roboauto list-currencies)"
            ;;
            payment_method=*)
                cur="${cur#*=}"
                local word methods payment_methods
                methods="all"
                for word in "${words[@]}"; do
                    case "$word" in
                    currency=*)
                        currency="${word#*=}"
                        if [ "$currency" = "btc" ]; then
                            methods="swap"
                        else
                            methods="fiat"
                        fi
                        break
                    ;;
                    esac
                done
                if [ "$methods" = "all" ]; then
                    payment_methods="$(roboauto list-payment-methods)"
                else
                    payment_methods="$(roboauto list-payment-methods --"${methods}")"
                fi
                OPTS="$OPTS
$(
    printf "%s\n" "$payment_methods" |
    awk 'NF { print "\""$0"\"" }'
)"
            ;;
            esac
        ;;
        *)
            local order_keys order_keys_correct

            order_keys="$(roboauto list-order-fields)"
            order_keys_correct="payment_method
$(
    ___list_non_already_set_array \
        "$order_keys" "$cur" "${words[@]}"
)"

            OPTS="$OPTS
$(
    printf "%s\n" "$order_keys_correct" |
    uniq |
    sed 's/$/=/'
)"
        ;;
        esac
    }

    ___roboauto_get_coordinators() {
        roboauto list-configs |
        jq -r '.federation | keys[] as $k | "--\($k)"'
    }

    ___roboauto_get_robots() {
        find "$@" -mindepth 1 -maxdepth 1 -type d 2>/dev/null |
        rev |
        cut -d "/" -f 1 |
        rev
    }

    # shellcheck disable=SC2034
    local cur prev words=() cword
    local word advanced_completion default_completion

    # if bash completion is sourced
    if [ "$(type -t _get_comp_words_by_ref 2>/dev/null)" = "function" ]; then
        _get_comp_words_by_ref -n = cur prev words cword

        advanced_completion=true
    else
        cur="$2"
        prev="$3"
        words=("${COMP_WORDS[@]}")
        cword="$COMP_CWORD"

        advanced_completion=false
    fi

    default_completion=false

    OPTS=""

    if [ "${cword}" -eq 1 ]; then
        OPTS="
-h
--help
--verbose-help
-v
--version
$(
    roboauto -h |
    grep '^[^[:space:]]' |
    tail -n +2 |
    cut -d " " -f 1 |
    tr '|' '\n' |
    uniq
)"
    else
        local action="${words[1]}"

        local roboauto_home="${XDG_DATA_HOME:-${XDG_LOCAL_HOME:-$HOME/.local}/share}/roboauto"
        local active_home="$roboauto_home/active"
        local pending_home="$roboauto_home/pending"
        local inactive_home="$roboauto_home/inactive"
        local paused_home="$roboauto_home/paused"

        case "$action" in
        list-payment-methods)
            if [ "${cword}" -eq 2 ]; then
                OPTS="
--fiat
--swap"
            fi
        ;;
        invoice-amount-calculate)
            if [ "$cword" -eq 2 ]; then
                if [ "$advanced_completion" = true ]; then
                    if [ "$cword" != "--budget-ppm=" ]; then
                        OPTS="--budget-ppm="
                    fi
                fi
            fi
        ;;
        import-robot)
            if [ "${cword}" -eq 2 ]; then
                OPTS="$(___roboauto_get_coordinators)"
            elif [ "${cword}" -eq 3 ]; then
                OPTS="
--pending
--paused
--inactive"
            fi
        ;;
        print-token|print-coordinator)
            if [ "${cword}" -eq 2 ]; then
                OPTS="$(
                    ___roboauto_get_robots \
                        "$active_home" "$pending_home" "$inactive_home" "$paused_home"
                )"
            fi
        ;;
        list-active|list-pending|list-inactive|list-paused)
            if [ "${cword}" -eq 2 ]; then
                OPTS="--coordinator"
            fi
        ;;
        set-active)
            if [ "${cword}" -eq 2 ]; then
                OPTS="$(
                    ___roboauto_get_robots \
                        "$pending_home" "$inactive_home" "$paused_home"
                )"
            fi
        ;;
        set-pending|set-inactive|set-paused)
            if [ "${cword}" -eq 2 ]; then
                OPTS="
--all
$(___roboauto_get_robots "$active_home")"
            fi
        ;;
        order-info-dir)
            if [ "${cword}" -eq 2 ]; then
                OPTS="$OPTS
--active
--pending
--paused
--inactive
--dir"
            fi
            if [ "${cword}" -eq 3 ] && [ "$prev" = "--dir" ]; then
                default_completion=true
            fi
        ;;
        order-summary)
            if [ "${cword}" -eq 2 ]; then
                OPTS="--active
--pending
--paused
--inactive"
            fi
        ;;
        robosats-info|list-historical|list-limits|list-price|list-ticks)
            if [ "${cword}" -eq 2 ]; then
                OPTS="$(___roboauto_get_coordinators)"
            fi
        ;;
        generate-robot)
            if [ "${cword}" -eq 2 ]; then
                OPTS="$(___roboauto_get_coordinators)"
            elif [ "${cword}" -eq 3 ]; then
                OPTS="
--active
--pending
--inactive"
            fi
        ;;
        robot-info)
            if [ "${cword}" -eq 2 ]; then
                OPTS="$OPTS
--stdin
--stdin-base91
$(___roboauto_get_robots "$active_home" "$pending_home")"
            fi
            if [ "${cword}" -eq 3 ]; then
                if [ "$prev" = "--stdin" ] || [ "$prev" = "--stdin-base91" ]; then
                    OPTS="$(___roboauto_get_coordinators)"
                fi
            fi
        ;;
        claim-reward)
            if [ "${cword}" -eq 2 ]; then
                OPTS="$(
                    ___roboauto_get_robots \
                        "$active_home" "$pending_home" "$paused_home" "$inactive_home"
                )"
            fi
        ;;
        stealth-option)
            if [ "${cword}" -eq 2 ]; then
                OPTS="$(
                    ___roboauto_get_robots \
                        "$active_home" "$pending_home" "$paused_home"
                )"
            elif [ "${cword}" -eq 3 ]; then
                OPTS="
true
false"
            fi
        ;;
        order-info)
            local words_after_options
            words_after_options="0"
            if new_options="$(
                ___multiple_options_handle "2" \
"--local --search
--simple" \
                    "${words[@]}"
            )"; then
                OPTS="$new_options"
            else
                words_after_options="$new_options"
            fi

            if [ "$words_after_options" -eq 0 ]; then
                local is_local=false
                for word in "${words[@]}"; do
                    case "$word" in
                    --local)
                        is_local=true
                        break
                    ;;
                    esac
                done
                local robots
                if [ "$is_local" = false ]; then
                    robots="$(
                        ___roboauto_get_robots \
                            "$active_home" "$paused_home" "$pending_home"
                    )"
                else
                    robots="$(
                        ___roboauto_get_robots \
                            "$active_home" "$pending_home" "$paused_home" "$inactive_home"
                    )"
                fi
                OPTS="$OPTS
$robots"
            elif [ "$words_after_options" -eq 1 ]; then
                local is_search=false
                for word in "${words[@]}"; do
                    case "$word" in
                    --search)
                        is_search=true
                        break
                    ;;
                    esac
                done
                local robot_dir orders
                if [ "$is_search" = false ]; then
                    robot_dir="$(
                        find "$roboauto_home" -type d -name "$prev" 2>/dev/null
                    )"
                    if [ -d "$robot_dir" ]; then
                        orders="$(
                            find "${robot_dir}/orders" -mindepth 1 -maxdepth 1 2>/dev/null |
                            rev |
                            cut -d "/" -f 1 |
                            rev
                        )"
                        if [ -n "$orders" ]; then
                            OPTS="$orders"
                        fi
                    fi
                fi
            fi
        ;;
        chat-print)
            if [ "${cword}" -eq 2 ]; then
                OPTS="--local"
            fi
            if [ "${cword}" -eq 2 ] || [ "${cword}" -eq 3 ]; then
                OPTS="$OPTS
$(___roboauto_get_robots "$pending_home")"
            fi
        ;;
        message-send)
            if [ "${cword}" -eq 2 ]; then
                OPTS="$(___roboauto_get_robots "$pending_home")"
            fi
        ;;
        list-hours)
            if [ "${cword}" -eq 2 ]; then
                OPTS="--relative"
            fi
        ;;
        list-offers)
            local coordinators_list currencies_list
            coordinators_list="$(___roboauto_get_coordinators)"
            currencies_list="$(roboauto list-currencies)"

            if [ "${cword}" -eq 2 ]; then
                OPTS="--until-success
--local"
            fi
            if \
                [ "${cword}" -eq 2 ] || {
                    [ "${cword}" -eq 3 ] && \
                    { [ "$prev" = "--until-success" ] || [ "$prev" = "--local" ]; }
                }
            then
                OPTS="$OPTS
--all
$coordinators_list"
            else
                if
                    printf "%s\n" "$coordinators_list" |
                    grep "^${prev}" >/dev/null 2>&1
                then
                    local coordinators_not_set
                    coordinators_not_set="$(
                        ___list_non_already_set_array \
                            "$coordinators_list" "$cur" "${words[@]}"
                    )"
                    OPTS="$coordinators_not_set
all
$currencies_list
--sell
--buy"
                elif [ "$prev" = "--all" ]; then
                    OPTS="all
$currencies_list
--sell
--buy"
                elif [ "$prev" = "--buy" ] || [ "$prev" = "--sell" ]; then
                    OPTS="all
$currencies_list"
                fi
            fi
        ;;
        create-order)
            if [ "${cword}" -eq 2 ]; then
                OPTS="
--no-bond
--no-node
--no-active"
            fi
            if [ "${cword}" -eq 3 ]; then
                if [ "$prev" = "--no-bond" ] || [ "$prev" = "--no-node" ]; then
                    OPTS="--no-active"
                elif [ "$prev" = "--no-active" ]; then
                    OPTS="--no-bond
--no-node"
                fi
            fi
            if \
                [ "${cword}" -eq 2 ] || {
                    { [ "${cword}" -eq 3 ] || [ "${cword}" -eq 4 ]; } && {
                        [ "$prev" = "--no-bond" ] ||
                        [ "$prev" = "--no-node" ] ||
                        [ "$prev" = "--no-active" ]
                    }
                }
            then
                OPTS="$OPTS
$(___roboauto_get_robots "$paused_home")"
            elif [ "$advanced_completion" = true ]; then
                case "$prev" in
                --from-robot)
                    OPTS="$(
                        ___roboauto_get_robots \
                            "$active_home" "$pending_home" "$inactive_home" "$paused_home"
                    )"
                ;;
                *=*) ;;
                *)
                    OPTS="--from-robot"
                ;;
                esac
                ___roboauto_complete_order_fields
            fi
        ;;
        cancel-order)
            if [ "${cword}" -eq 2 ]; then
                OPTS="$(___roboauto_get_robots "$active_home")"
            fi
        ;;
        recreate-order)
            if [ "${cword}" -eq 2 ]; then
                OPTS="
--no-cancel
--no-node
--no-bond"
            fi
            if [ "${cword}" -eq 3 ]; then
                if [ "$prev" = "--no-bond" ] || [ "$prev" = "--no-node" ]; then
                    OPTS="--no-cancel"
                elif [ "$prev" = "--no-cancel" ]; then
                    OPTS="--no-bond
--no-node"
                fi
            fi
            local should_cancel=true
            for word in "${words[@]}"; do
                case "$word" in
                --no-cancel)
                    should_cancel=false
                    break
                ;;
                esac
            done
            if \
                [ "${cword}" -eq 2 ] || {
                    { [ "${cword}" -eq 3 ] || [ "${cword}" -eq 4 ]; } && {
                        [ "$prev" = "--no-bond" ] ||
                        [ "$prev" = "--no-node" ] ||
                        [ "$prev" = "--no-cancel" ]
                    }
                }
            then
                local robots
                if [ "$should_cancel" = true ]; then
                    robots="$(___roboauto_get_robots "$active_home")"
                else
                    robots="$(___roboauto_get_robots "$paused_home" "$inactive_home")"
                fi
                OPTS="$OPTS
$robots"
            elif [ "$advanced_completion" = true ]; then
                case "$prev" in
                --from-robot)
                    OPTS="$(
                        ___roboauto_get_robots \
                            "$active_home" "$pending_home" "$inactive_home" "$paused_home"
                    )"
                ;;
                *=*) ;;
                *)
                    OPTS="--from-robot"
                ;;
                esac
                ___roboauto_complete_order_fields
            fi
        ;;
        change-order-expire)
            if [ "${cword}" -eq 2 ]; then
                OPTS="
--print
--remove"
            fi
            if \
                [ "${cword}" -eq 2 ] || {
                    [ "${cword}" -eq 3 ] && \
                    { [ "$prev" = "--print" ] || [ "$prev" = "--remove" ]; }
                }
            then
                OPTS="$OPTS
$(___roboauto_get_robots "$active_home")"
            elif [ "$advanced_completion" = true ]; then
                local should_complete=true
                for word in "${words[@]}"; do
                    case "$word" in
                    --print|--remove)
                        should_complete=false
                        break
                    ;;
                    esac
                done
                if [ "$should_complete" = true ]; then
                    case "$prev" in
                    --from-robot)
                        OPTS="$(
                            ___roboauto_get_robots \
                                "$active_home" "$pending_home" "$inactive_home" "$paused_home"
                        )"
                    ;;
                    *=*) ;;
                    *)
                        OPTS="--from-robot"
                    ;;
                    esac
                    ___roboauto_complete_order_fields
                fi
            fi
        ;;
        take-order)
            if [ "${cword}" -eq 2 ]; then
                OPTS="--fully
--no-node"
            fi
            if \
                [ "${cword}" -eq 2 ] || {
                    [ "${cword}" -eq 3 ] && {
                        [ "$prev" = "--fully" ] || [ "$prev" = "--no-node" ]
                    }
                }
            then
                OPTS="$OPTS
$(___roboauto_get_robots "$paused_home")"
            fi
        ;;
        pause-toggle)
            if [ "${cword}" -eq 2 ]; then
                OPTS="$(___roboauto_get_robots "$active_home" "$paused_home")"
            fi
        ;;
        invoice-send)
            if [ "${cword}" -eq 2 ]; then
                OPTS="$(___roboauto_get_robots "$pending_home")"
            elif [ "$cword" -eq 3 ]; then
                if [ "$advanced_completion" = true ]; then
                    if [ "$cur" != "--budget-ppm=" ]; then
                        OPTS="--budget-ppm="
                    fi
                fi
            fi
        ;;
        escrow-pay|address-send|confirm-undo)
            if [ "${cword}" -eq 2 ]; then
                OPTS="$(___roboauto_get_robots "$pending_home")"
            fi
        ;;
        collaborative-cancel|confirm-send|dispute-start)
            if [ "${cword}" -eq 2 ]; then
                OPTS="$(___roboauto_get_robots "$pending_home")"
            elif [ "${cword}" -eq 3 ]; then
                OPTS="--no-save-chat"
            fi
        ;;
        statement-submit)
            if [ "${cword}" -eq 2 ]; then
                OPTS="$(___roboauto_get_robots "$pending_home")"
            elif [ "${cword}" -eq 3 ]; then
                OPTS="--file"
            elif [ "${cword}" -eq 4 ] && [ "$prev" = "--file" ]; then
                default_completion=true
            fi
        ;;
        rate-coordinator)
            if [ "${cword}" -eq 2 ]; then
                OPTS="$(___roboauto_get_robots "$inactive_home")"
            elif [ "${cword}" -eq 3 ]; then
                OPTS="$(seq 1 5)"
            fi
        ;;
        keep-online)
            if [ "$advanced_completion" = true ]; then
                case "$cur" in
                *=*)
                    case "$cur" in
                    --verbosity=*)
                        cur="${cur#*=}"
                        OPTS="1
2"
                    ;;
                    esac
                ;;
                *)
                    if new_options="$(
                        ___multiple_options_handle "2" \
"--verbosity=
--no-sleep
--no-initial-info" \
                            "${words[@]}"
                    )"; then
                        OPTS="$new_options"
                    fi
                ;;
                esac
            fi
        ;;
        esac
    fi

    if [ -n "$OPTS" ]; then
        # complete with ignorecase and multi words
        IFS="$ifs_newline"
        # shellcheck disable=SC2207
        COMPREPLY=($(
            printf "%s\n" "$OPTS" |
            awk -v IGNORECASE=1 -v p="$cur" 'p==substr($0,0,length(p))'
        ))
        IFS="$ifs_original"

        # do not put a space when the completion ends with an equal
        for word in "${COMPREPLY[@]}"; do
            case "$word" in
            *=)
                compopt -o nospace
            ;;
            esac
        done
    elif [ "$default_completion" = true ]; then
        if [ "$(type -t _minimal 2>/dev/null)" = "function" ]; then
            _minimal
        fi
    fi
} &&
complete -F __roboauto_completion roboauto
